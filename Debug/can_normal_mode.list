
can_normal_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002994  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b1c  08002b1c  00003b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b2c  08002b2c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b2c  08002b2c  00003b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b34  08002b34  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00003b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b38  08002b38  00003b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac8a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001976  00000000  00000000  0000ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00010640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088a  00000000  00000000  00011158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201c0  00000000  00000000  000119e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b654  00000000  00000000  00031ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7842  00000000  00000000  0003d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104a38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ecc  00000000  00000000  00104a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00107948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b04 	.word	0x08002b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b04 	.word	0x08002b04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb06 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f818 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8f0 	bl	80006e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000504:	f000 f87e 	bl	8000604 <MX_CAN1_Init>
  MX_TIM9_Init();
 8000508:	f000 f8b2 	bl	8000670 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  //before CAN1 Start, Enable Interrupt
  if( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 800050c:	f240 4103 	movw	r1, #1027	@ 0x403
 8000510:	4806      	ldr	r0, [pc, #24]	@ (800052c <main+0x38>)
 8000512:	f000 fdcc 	bl	80010ae <HAL_CAN_ActivateNotification>
  {
  	// Error_Handler();
  }

  if(HAL_CAN_Start(&hcan1) != HAL_OK) {Error_Handler(); }
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <main+0x38>)
 8000518:	f000 fc63 	bl	8000de2 <HAL_CAN_Start>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <main+0x34>
 8000522:	f000 f9a1 	bl	8000868 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x34>
 800052c:	20000028 	.word	0x20000028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fab4 	bl	8002aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	@ (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fa92 	bl	8001ae0 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f951 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fcf3 	bl	8001fd0 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f93a 	bl	8000868 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000608:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <MX_CAN1_Init+0x64>)
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <MX_CAN1_Init+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000610:	2203      	movs	r2, #3
 8000612:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_CAN1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000622:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000626:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_CAN1_Init+0x64>)
 800062a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800062e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000638:	2201      	movs	r2, #1
 800063a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_CAN1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_CAN1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_CAN1_Init+0x64>)
 8000656:	f000 fac9 	bl	8000bec <HAL_CAN_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000660:	f000 f902 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40006400 	.word	0x40006400

08000670 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_TIM9_Init+0x6c>)
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <MX_TIM9_Init+0x70>)
 8000686:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16799;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_TIM9_Init+0x6c>)
 800068a:	f244 129f 	movw	r2, #16799	@ 0x419f
 800068e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_TIM9_Init+0x6c>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_TIM9_Init+0x6c>)
 8000698:	f242 720f 	movw	r2, #9999	@ 0x270f
 800069c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_TIM9_Init+0x6c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_TIM9_Init+0x6c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80006aa:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_TIM9_Init+0x6c>)
 80006ac:	f001 fe7c 	bl	80023a8 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f000 f8d7 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_TIM9_Init+0x6c>)
 80006c6:	f001 ffae 	bl	8002626 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80006d0:	f000 f8ca 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000050 	.word	0x20000050
 80006e0:	40014000 	.word	0x40014000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b32      	ldr	r3, [pc, #200]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a31      	ldr	r2, [pc, #196]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b2f      	ldr	r3, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b2b      	ldr	r3, [pc, #172]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a2a      	ldr	r2, [pc, #168]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a23      	ldr	r2, [pc, #140]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_GPIO_Init+0xe4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000770:	4816      	ldr	r0, [pc, #88]	@ (80007cc <MX_GPIO_Init+0xe8>)
 8000772:	f001 f977 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <MX_GPIO_Init+0xec>)
 800078c:	f000 ffce 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000790:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4808      	ldr	r0, [pc, #32]	@ (80007cc <MX_GPIO_Init+0xe8>)
 80007aa:	f000 ffbf 	bl	800172c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2006      	movs	r0, #6
 80007b4:	f000 ff83 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007b8:	2006      	movs	r0, #6
 80007ba:	f000 ff9c 	bl	80016f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	@ 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020000 	.word	0x40020000

080007d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    UNUSED(htim);
    //CAN1_TX
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <HAL_CAN_TxMailbox0CompleteCallback>:



// Callback functions
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	// printf()
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	// printf()
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	// printf()
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rec_msg[11];

	//while( !HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rec_msg) != HAL_OK){
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	f107 0214 	add.w	r2, r7, #20
 8000834:	2100      	movs	r1, #0
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000838:	f000 fb17 	bl	8000e6a <HAL_CAN_GetRxMessage>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_Handler();
 8000842:	f000 f811 	bl	8000868 <Error_Handler>
	}
}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000028 	.word	0x20000028

08000854 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	// printf();
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000888:	6453      	str	r3, [r2, #68]	@ 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 fef8 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <HAL_CAN_MspInit+0xb4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d144      	bne.n	8000970 <HAL_CAN_MspInit+0xac>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_CAN_MspInit+0xb8>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a23      	ldr	r2, [pc, #140]	@ (800097c <HAL_CAN_MspInit+0xb8>)
 80008f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <HAL_CAN_MspInit+0xb8>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <HAL_CAN_MspInit+0xb8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <HAL_CAN_MspInit+0xb8>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <HAL_CAN_MspInit+0xb8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800091e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000930:	2309      	movs	r3, #9
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <HAL_CAN_MspInit+0xbc>)
 800093c:	f000 fef6 	bl	800172c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2013      	movs	r0, #19
 8000946:	f000 feba 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800094a:	2013      	movs	r0, #19
 800094c:	f000 fed3 	bl	80016f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2014      	movs	r0, #20
 8000956:	f000 feb2 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800095a:	2014      	movs	r0, #20
 800095c:	f000 fecb 	bl	80016f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2016      	movs	r0, #22
 8000966:	f000 feaa 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800096a:	2016      	movs	r0, #22
 800096c:	f000 fec3 	bl	80016f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40006400 	.word	0x40006400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400

08000984 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_TIM_Base_MspInit+0x48>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d115      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_TIM_Base_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0c      	ldr	r2, [pc, #48]	@ (80009d0 <HAL_TIM_Base_MspInit+0x4c>)
 80009a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_TIM_Base_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2018      	movs	r0, #24
 80009b8:	f000 fe81 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009bc:	2018      	movs	r0, #24
 80009be:	f000 fe9a 	bl	80016f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40014000 	.word	0x40014000
 80009d0:	40023800 	.word	0x40023800

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 f8bf 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f001 f82e 	bl	8001a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <CAN1_TX_IRQHandler+0x10>)
 8000a46:	f000 fb58 	bl	80010fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000028 	.word	0x20000028

08000a54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <CAN1_RX0_IRQHandler+0x10>)
 8000a5a:	f000 fb4e 	bl	80010fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000028 	.word	0x20000028

08000a68 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <CAN1_SCE_IRQHandler+0x10>)
 8000a6e:	f000 fb44 	bl	80010fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000028 	.word	0x20000028

08000a7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000a82:	f001 fce0 	bl	8002446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000050 	.word	0x20000050

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f001 ffeb 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd05 	bl	80004f4 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af8:	08002b3c 	.word	0x08002b3c
  ldr r2, =_sbss
 8000afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b00:	2000009c 	.word	0x2000009c

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fdb9 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe9a 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fdd1 	bl	8001712 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 fd99 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000098 	.word	0x20000098

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000098 	.word	0x20000098

08000bec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e0ed      	b.n	8000dda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fe5a 	bl	80008c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0201 	orr.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c20:	f7ff ffd8 	bl	8000bd4 <HAL_GetTick>
 8000c24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c26:	e012      	b.n	8000c4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c28:	f7ff ffd4 	bl	8000bd4 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b0a      	cmp	r3, #10
 8000c34:	d90b      	bls.n	8000c4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2205      	movs	r2, #5
 8000c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e0c5      	b.n	8000dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0e5      	beq.n	8000c28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0202 	bic.w	r2, r2, #2
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c6c:	f7ff ffb2 	bl	8000bd4 <HAL_GetTick>
 8000c70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c72:	e012      	b.n	8000c9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c74:	f7ff ffae 	bl	8000bd4 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b0a      	cmp	r3, #10
 8000c80:	d90b      	bls.n	8000c9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2205      	movs	r2, #5
 8000c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e09f      	b.n	8000dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1e5      	bne.n	8000c74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7e1b      	ldrb	r3, [r3, #24]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d108      	bne.n	8000cc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e007      	b.n	8000cd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7e5b      	ldrb	r3, [r3, #25]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d108      	bne.n	8000cec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e007      	b.n	8000cfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e9b      	ldrb	r3, [r3, #26]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0220 	orr.w	r2, r2, #32
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e007      	b.n	8000d26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0220 	bic.w	r2, r2, #32
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7edb      	ldrb	r3, [r3, #27]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d108      	bne.n	8000d40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0210 	bic.w	r2, r2, #16
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0210 	orr.w	r2, r2, #16
 8000d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7f1b      	ldrb	r3, [r3, #28]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d108      	bne.n	8000d6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0208 	orr.w	r2, r2, #8
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e007      	b.n	8000d7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0208 	bic.w	r2, r2, #8
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7f5b      	ldrb	r3, [r3, #29]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d108      	bne.n	8000d94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f042 0204 	orr.w	r2, r2, #4
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e007      	b.n	8000da4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0204 	bic.w	r2, r2, #4
 8000da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	ea42 0103 	orr.w	r1, r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d12e      	bne.n	8000e54 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0201 	bic.w	r2, r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e0e:	f7ff fee1 	bl	8000bd4 <HAL_GetTick>
 8000e12:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e14:	e012      	b.n	8000e3c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e16:	f7ff fedd 	bl	8000bd4 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d90b      	bls.n	8000e3c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e28:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2205      	movs	r2, #5
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e012      	b.n	8000e62 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1e5      	bne.n	8000e16 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e006      	b.n	8000e62 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
  }
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b087      	sub	sp, #28
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d003      	beq.n	8000e8e <HAL_CAN_GetRxMessage+0x24>
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	f040 8103 	bne.w	8001094 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10e      	bne.n	8000eb2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e0f7      	b.n	80010a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d107      	bne.n	8000ed0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e0e8      	b.n	80010a2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	331b      	adds	r3, #27
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	4413      	add	r3, r2
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0204 	and.w	r2, r3, #4
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	331b      	adds	r3, #27
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0d5b      	lsrs	r3, r3, #21
 8000efe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e00b      	b.n	8000f20 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	331b      	adds	r3, #27
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	331b      	adds	r3, #27
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0202 	and.w	r2, r3, #2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	331b      	adds	r3, #27
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	3304      	adds	r3, #4
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2208      	movs	r2, #8
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	e00b      	b.n	8000f6e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	331b      	adds	r3, #27
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	3304      	adds	r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 020f 	and.w	r2, r3, #15
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	331b      	adds	r3, #27
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4413      	add	r3, r2
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	331b      	adds	r3, #27
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	3304      	adds	r3, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0c1b      	lsrs	r3, r3, #16
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0a1a      	lsrs	r2, r3, #8
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0c1a      	lsrs	r2, r3, #16
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0e1a      	lsrs	r2, r3, #24
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3304      	adds	r3, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0a1a      	lsrs	r2, r3, #8
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	4413      	add	r3, r2
 800103e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0c1a      	lsrs	r2, r3, #16
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3306      	adds	r3, #6
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	4413      	add	r3, r2
 8001058:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0e1a      	lsrs	r2, r3, #24
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3307      	adds	r3, #7
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d108      	bne.n	8001080 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0220 	orr.w	r2, r2, #32
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	e007      	b.n	8001090 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0220 	orr.w	r2, r2, #32
 800108e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	e006      	b.n	80010a2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
  }
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d002      	beq.n	80010cc <HAL_CAN_ActivateNotification+0x1e>
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d109      	bne.n	80010e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6959      	ldr	r1, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	e006      	b.n	80010ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
  }
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b08a      	sub	sp, #40	@ 0x28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d07c      	beq.n	800123a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d023      	beq.n	8001192 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fb43 	bl	80007e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001162:	e016      	b.n	8001192 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
 8001176:	e00c      	b.n	8001192 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
 800118a:	e002      	b.n	8001192 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f96b 	bl	8001468 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d024      	beq.n	80011e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fb23 	bl	80007fc <HAL_CAN_TxMailbox1CompleteCallback>
 80011b6:	e016      	b.n	80011e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ca:	e00c      	b.n	80011e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011de:	e002      	b.n	80011e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f94b 	bl	800147c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d024      	beq.n	800123a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fb03 	bl	8000810 <HAL_CAN_TxMailbox2CompleteCallback>
 800120a:	e016      	b.n	800123a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
 800121e:	e00c      	b.n	800123a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	e002      	b.n	800123a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f92b 	bl	8001490 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00c      	beq.n	800125e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2210      	movs	r2, #16
 800125c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2208      	movs	r2, #8
 8001278:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f912 	bl	80014a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fac3 	bl	8000824 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2210      	movs	r2, #16
 80012c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2208      	movs	r2, #8
 80012dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f8f4 	bl	80014cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f8db 	bl	80014b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2210      	movs	r2, #16
 800131c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f8de 	bl	80014e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2208      	movs	r2, #8
 800133e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f8d7 	bl	80014f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d07b      	beq.n	8001448 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d072      	beq.n	8001440 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d043      	beq.n	8001440 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03e      	beq.n	8001440 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013c8:	2b60      	cmp	r3, #96	@ 0x60
 80013ca:	d02b      	beq.n	8001424 <HAL_CAN_IRQHandler+0x32a>
 80013cc:	2b60      	cmp	r3, #96	@ 0x60
 80013ce:	d82e      	bhi.n	800142e <HAL_CAN_IRQHandler+0x334>
 80013d0:	2b50      	cmp	r3, #80	@ 0x50
 80013d2:	d022      	beq.n	800141a <HAL_CAN_IRQHandler+0x320>
 80013d4:	2b50      	cmp	r3, #80	@ 0x50
 80013d6:	d82a      	bhi.n	800142e <HAL_CAN_IRQHandler+0x334>
 80013d8:	2b40      	cmp	r3, #64	@ 0x40
 80013da:	d019      	beq.n	8001410 <HAL_CAN_IRQHandler+0x316>
 80013dc:	2b40      	cmp	r3, #64	@ 0x40
 80013de:	d826      	bhi.n	800142e <HAL_CAN_IRQHandler+0x334>
 80013e0:	2b30      	cmp	r3, #48	@ 0x30
 80013e2:	d010      	beq.n	8001406 <HAL_CAN_IRQHandler+0x30c>
 80013e4:	2b30      	cmp	r3, #48	@ 0x30
 80013e6:	d822      	bhi.n	800142e <HAL_CAN_IRQHandler+0x334>
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d002      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x2f8>
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d005      	beq.n	80013fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013f0:	e01d      	b.n	800142e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013fa:	e019      	b.n	8001430 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001404:	e014      	b.n	8001430 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800140e:	e00f      	b.n	8001430 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001418:	e00a      	b.n	8001430 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001422:	e005      	b.n	8001430 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800142c:	e000      	b.n	8001430 <HAL_CAN_IRQHandler+0x336>
            break;
 800142e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800143e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2204      	movs	r2, #4
 8001446:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff f9fa 	bl	8000854 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	@ 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	@ (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	@ 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff3e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff31 	bl	800156c <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e16b      	b.n	8001a20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 815a 	bne.w	8001a1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d005      	beq.n	800177e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	2b02      	cmp	r3, #2
 800177c:	d130      	bne.n	80017e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0201 	and.w	r2, r3, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80b4 	beq.w	8001a1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b60      	ldr	r3, [pc, #384]	@ (8001a38 <HAL_GPIO_Init+0x30c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001a38 <HAL_GPIO_Init+0x30c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a38 <HAL_GPIO_Init+0x30c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a5b      	ldr	r2, [pc, #364]	@ (8001a3c <HAL_GPIO_Init+0x310>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a52      	ldr	r2, [pc, #328]	@ (8001a40 <HAL_GPIO_Init+0x314>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x226>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a51      	ldr	r2, [pc, #324]	@ (8001a44 <HAL_GPIO_Init+0x318>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x222>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a50      	ldr	r2, [pc, #320]	@ (8001a48 <HAL_GPIO_Init+0x31c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x21e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a4c <HAL_GPIO_Init+0x320>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x21a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	@ (8001a50 <HAL_GPIO_Init+0x324>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x216>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a54 <HAL_GPIO_Init+0x328>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x212>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4c      	ldr	r2, [pc, #304]	@ (8001a58 <HAL_GPIO_Init+0x32c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x20e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a5c <HAL_GPIO_Init+0x330>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x20a>
 8001932:	2307      	movs	r3, #7
 8001934:	e00e      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001936:	2308      	movs	r3, #8
 8001938:	e00c      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800193a:	2306      	movs	r3, #6
 800193c:	e00a      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800193e:	2305      	movs	r3, #5
 8001940:	e008      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001942:	2304      	movs	r3, #4
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x228>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x228>
 8001952:	2300      	movs	r3, #0
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f002 0203 	and.w	r2, r2, #3
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	4093      	lsls	r3, r2
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001964:	4935      	ldr	r1, [pc, #212]	@ (8001a3c <HAL_GPIO_Init+0x310>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001996:	4a32      	ldr	r2, [pc, #200]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c0:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a14:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <HAL_GPIO_Init+0x334>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	f67f ae90 	bls.w	8001748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40013800 	.word	0x40013800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40021400 	.word	0x40021400
 8001a58:	40021800 	.word	0x40021800
 8001a5c:	40021c00 	.word	0x40021c00
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f806 	bl	8001ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e267      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d075      	beq.n	8001bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001afe:	4b88      	ldr	r3, [pc, #544]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4b85      	ldr	r3, [pc, #532]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b82      	ldr	r3, [pc, #520]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b7e      	ldr	r3, [pc, #504]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d157      	bne.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e242      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x74>
 8001b46:	4b76      	ldr	r3, [pc, #472]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b70      	ldr	r3, [pc, #448]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6f      	ldr	r2, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b78:	4b69      	ldr	r3, [pc, #420]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a68      	ldr	r2, [pc, #416]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b66      	ldr	r3, [pc, #408]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a65      	ldr	r2, [pc, #404]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f81c 	bl	8000bd4 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f818 	bl	8000bd4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e207      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f808 	bl	8000bd4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f804 	bl	8000bd4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b51      	ldr	r3, [pc, #324]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c7      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4937      	ldr	r1, [pc, #220]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b34      	ldr	r3, [pc, #208]	@ (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7fe ffbd 	bl	8000bd4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7fe ffb9 	bl	8000bd4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a8      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b28      	ldr	r3, [pc, #160]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4925      	ldr	r1, [pc, #148]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7fe ff9c 	bl	8000bd4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7fe ff98 	bl	8000bd4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e187      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d036      	beq.n	8001d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7fe ff7c 	bl	8000bd4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7fe ff78 	bl	8000bd4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e167      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x200>
 8001cfe:	e01b      	b.n	8001d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7fe ff65 	bl	8000bd4 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	e00e      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7fe ff61 	bl	8000bd4 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d907      	bls.n	8001d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e150      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470000 	.word	0x42470000
 8001d28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ea      	bne.n	8001d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8097 	beq.w	8001e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b81      	ldr	r3, [pc, #516]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d66:	4b7a      	ldr	r3, [pc, #488]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b77      	ldr	r3, [pc, #476]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b74      	ldr	r3, [pc, #464]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a73      	ldr	r2, [pc, #460]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ff21 	bl	8000bd4 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7fe ff1d 	bl	8000bd4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e10c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x2ea>
 8001dbc:	4b64      	ldr	r3, [pc, #400]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc0:	4a63      	ldr	r2, [pc, #396]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc8:	e01c      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x30c>
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dde:	4b5c      	ldr	r3, [pc, #368]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df8:	4b55      	ldr	r3, [pc, #340]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a54      	ldr	r2, [pc, #336]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fee2 	bl	8000bd4 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7fe fede 	bl	8000bd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0cb      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	4b49      	ldr	r3, [pc, #292]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ee      	beq.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fecc 	bl	8000bd4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7fe fec8 	bl	8000bd4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0b5      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ee      	bne.n	8001e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e68:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a1 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7e:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d05c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d141      	bne.n	8001f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fe9c 	bl	8000bd4 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe fe98 	bl	8000bd4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e087      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fe71 	bl	8000bd4 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7fe fe6d 	bl	8000bd4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e05c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x416>
 8001f14:	e054      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fe5a 	bl	8000bd4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe fe56 	bl	8000bd4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e045      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e038      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d028      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d121      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cc      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d90c      	bls.n	800200c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a58      	ldr	r2, [pc, #352]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800202e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a52      	ldr	r2, [pc, #328]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e067      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b37      	ldr	r3, [pc, #220]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4934      	ldr	r1, [pc, #208]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fd88 	bl	8000bd4 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7fe fd84 	bl	8000bd4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b25      	ldr	r3, [pc, #148]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d20c      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	@ (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fce8 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	08002b1c 	.word	0x08002b1c
 8002194:	20000000 	.word	0x20000000
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a0:	b094      	sub	sp, #80	@ 0x50
 80021a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b4:	4b79      	ldr	r3, [pc, #484]	@ (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d00d      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x40>
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	f200 80e1 	bhi.w	8002388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ce:	e0db      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b73      	ldr	r3, [pc, #460]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021d4:	e0db      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d6:	4b73      	ldr	r3, [pc, #460]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80021d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021da:	e0d8      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021dc:	4b6f      	ldr	r3, [pc, #444]	@ (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e6:	4b6d      	ldr	r3, [pc, #436]	@ (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	4b6a      	ldr	r3, [pc, #424]	@ (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	2200      	movs	r2, #0
 80021fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
 8002206:	2300      	movs	r3, #0
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
 800220a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	0159      	lsls	r1, r3, #5
 800221c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002220:	0150      	lsls	r0, r2, #5
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4621      	mov	r1, r4
 8002228:	1a51      	subs	r1, r2, r1
 800222a:	6139      	str	r1, [r7, #16]
 800222c:	4629      	mov	r1, r5
 800222e:	eb63 0301 	sbc.w	r3, r3, r1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002240:	4659      	mov	r1, fp
 8002242:	018b      	lsls	r3, r1, #6
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800224a:	4651      	mov	r1, sl
 800224c:	018a      	lsls	r2, r1, #6
 800224e:	4651      	mov	r1, sl
 8002250:	ebb2 0801 	subs.w	r8, r2, r1
 8002254:	4659      	mov	r1, fp
 8002256:	eb63 0901 	sbc.w	r9, r3, r1
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800226a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800226e:	4690      	mov	r8, r2
 8002270:	4699      	mov	r9, r3
 8002272:	4623      	mov	r3, r4
 8002274:	eb18 0303 	adds.w	r3, r8, r3
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	462b      	mov	r3, r5
 800227c:	eb49 0303 	adc.w	r3, r9, r3
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800228e:	4629      	mov	r1, r5
 8002290:	024b      	lsls	r3, r1, #9
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002298:	4621      	mov	r1, r4
 800229a:	024a      	lsls	r2, r1, #9
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a2:	2200      	movs	r2, #0
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022ac:	f7fd ff8c 	bl	80001c8 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022b8:	e058      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ba:	4b38      	ldr	r3, [pc, #224]	@ (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	099b      	lsrs	r3, r3, #6
 80022c0:	2200      	movs	r2, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	4611      	mov	r1, r2
 80022c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	f04f 0000 	mov.w	r0, #0
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	0159      	lsls	r1, r3, #5
 80022e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e6:	0150      	lsls	r0, r2, #5
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4641      	mov	r1, r8
 80022ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80022f2:	4649      	mov	r1, r9
 80022f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800230c:	ebb2 040a 	subs.w	r4, r2, sl
 8002310:	eb63 050b 	sbc.w	r5, r3, fp
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	00eb      	lsls	r3, r5, #3
 800231e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002322:	00e2      	lsls	r2, r4, #3
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	4643      	mov	r3, r8
 800232a:	18e3      	adds	r3, r4, r3
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	464b      	mov	r3, r9
 8002330:	eb45 0303 	adc.w	r3, r5, r3
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002342:	4629      	mov	r1, r5
 8002344:	028b      	lsls	r3, r1, #10
 8002346:	4621      	mov	r1, r4
 8002348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800234c:	4621      	mov	r1, r4
 800234e:	028a      	lsls	r2, r1, #10
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002356:	2200      	movs	r2, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	61fa      	str	r2, [r7, #28]
 800235c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002360:	f7fd ff32 	bl	80001c8 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800237c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800237e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002386:	e002      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800238c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002390:	4618      	mov	r0, r3
 8002392:	3750      	adds	r7, #80	@ 0x50
 8002394:	46bd      	mov	sp, r7
 8002396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	00f42400 	.word	0x00f42400
 80023a4:	007a1200 	.word	0x007a1200

080023a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e041      	b.n	800243e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fad8 	bl	8000984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f000 fa0c 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01b      	beq.n	80024aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0202 	mvn.w	r2, #2
 800247a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f999 	bl	80027c8 <HAL_TIM_IC_CaptureCallback>
 8002496:	e005      	b.n	80024a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f98b 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f99c 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01b      	beq.n	80024f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f06f 0204 	mvn.w	r2, #4
 80024c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f973 	bl	80027c8 <HAL_TIM_IC_CaptureCallback>
 80024e2:	e005      	b.n	80024f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f965 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f976 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01b      	beq.n	8002542 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0208 	mvn.w	r2, #8
 8002512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f94d 	bl	80027c8 <HAL_TIM_IC_CaptureCallback>
 800252e:	e005      	b.n	800253c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f93f 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f950 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01b      	beq.n	800258e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f06f 0210 	mvn.w	r2, #16
 800255e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2208      	movs	r2, #8
 8002564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f927 	bl	80027c8 <HAL_TIM_IC_CaptureCallback>
 800257a:	e005      	b.n	8002588 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f919 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f92a 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00c      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f06f 0201 	mvn.w	r2, #1
 80025aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fe f911 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00c      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fa61 	bl	8002a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8fb 	bl	80027f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00c      	beq.n	800261e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f06f 0220 	mvn.w	r2, #32
 8002616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fa33 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_ConfigClockSource+0x1c>
 800263e:	2302      	movs	r3, #2
 8002640:	e0b4      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x186>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002660:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002668:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267a:	d03e      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xd4>
 800267c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002680:	f200 8087 	bhi.w	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002688:	f000 8086 	beq.w	8002798 <HAL_TIM_ConfigClockSource+0x172>
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002690:	d87f      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 8002692:	2b70      	cmp	r3, #112	@ 0x70
 8002694:	d01a      	beq.n	80026cc <HAL_TIM_ConfigClockSource+0xa6>
 8002696:	2b70      	cmp	r3, #112	@ 0x70
 8002698:	d87b      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 800269a:	2b60      	cmp	r3, #96	@ 0x60
 800269c:	d050      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0x11a>
 800269e:	2b60      	cmp	r3, #96	@ 0x60
 80026a0:	d877      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 80026a2:	2b50      	cmp	r3, #80	@ 0x50
 80026a4:	d03c      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0xfa>
 80026a6:	2b50      	cmp	r3, #80	@ 0x50
 80026a8:	d873      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	d058      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x13a>
 80026ae:	2b40      	cmp	r3, #64	@ 0x40
 80026b0:	d86f      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 80026b2:	2b30      	cmp	r3, #48	@ 0x30
 80026b4:	d064      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0x15a>
 80026b6:	2b30      	cmp	r3, #48	@ 0x30
 80026b8:	d86b      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d060      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0x15a>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d867      	bhi.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d05c      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0x15a>
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d05a      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0x15a>
 80026ca:	e062      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	f000 f9b2 	bl	8002a44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
      break;
 80026f8:	e04f      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800270a:	f000 f99b 	bl	8002a44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800271c:	609a      	str	r2, [r3, #8]
      break;
 800271e:	e03c      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272c:	461a      	mov	r2, r3
 800272e:	f000 f90f 	bl	8002950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2150      	movs	r1, #80	@ 0x50
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f968 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800273e:	e02c      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800274c:	461a      	mov	r2, r3
 800274e:	f000 f92e 	bl	80029ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2160      	movs	r1, #96	@ 0x60
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f958 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800275e:	e01c      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276c:	461a      	mov	r2, r3
 800276e:	f000 f8ef 	bl	8002950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f948 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 800277e:	e00c      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f000 f93f 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 8002790:	e003      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
      break;
 8002796:	e000      	b.n	800279a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002798:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a43      	ldr	r2, [pc, #268]	@ (8002924 <TIM_Base_SetConfig+0x120>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002822:	d00f      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a40      	ldr	r2, [pc, #256]	@ (8002928 <TIM_Base_SetConfig+0x124>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00b      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3f      	ldr	r2, [pc, #252]	@ (800292c <TIM_Base_SetConfig+0x128>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3e      	ldr	r2, [pc, #248]	@ (8002930 <TIM_Base_SetConfig+0x12c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3d      	ldr	r2, [pc, #244]	@ (8002934 <TIM_Base_SetConfig+0x130>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a32      	ldr	r2, [pc, #200]	@ (8002924 <TIM_Base_SetConfig+0x120>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002864:	d027      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2f      	ldr	r2, [pc, #188]	@ (8002928 <TIM_Base_SetConfig+0x124>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d023      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2e      	ldr	r2, [pc, #184]	@ (800292c <TIM_Base_SetConfig+0x128>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01f      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2d      	ldr	r2, [pc, #180]	@ (8002930 <TIM_Base_SetConfig+0x12c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01b      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a2c      	ldr	r2, [pc, #176]	@ (8002934 <TIM_Base_SetConfig+0x130>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d017      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2b      	ldr	r2, [pc, #172]	@ (8002938 <TIM_Base_SetConfig+0x134>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2a      	ldr	r2, [pc, #168]	@ (800293c <TIM_Base_SetConfig+0x138>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <TIM_Base_SetConfig+0x13c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a28      	ldr	r2, [pc, #160]	@ (8002944 <TIM_Base_SetConfig+0x140>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a27      	ldr	r2, [pc, #156]	@ (8002948 <TIM_Base_SetConfig+0x144>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a26      	ldr	r2, [pc, #152]	@ (800294c <TIM_Base_SetConfig+0x148>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <TIM_Base_SetConfig+0x120>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_Base_SetConfig+0xf2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <TIM_Base_SetConfig+0x130>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d103      	bne.n	80028fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f043 0204 	orr.w	r2, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40010400 	.word	0x40010400
 8002938:	40014000 	.word	0x40014000
 800293c:	40014400 	.word	0x40014400
 8002940:	40014800 	.word	0x40014800
 8002944:	40001800 	.word	0x40001800
 8002948:	40001c00 	.word	0x40001c00
 800294c:	40002000 	.word	0x40002000

08002950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f023 0201 	bic.w	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f023 030a 	bic.w	r3, r3, #10
 800298c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f023 0210 	bic.w	r2, r3, #16
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	031b      	lsls	r3, r3, #12
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	021a      	lsls	r2, r3, #8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <memset>:
 8002aac:	4402      	add	r2, r0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <memset+0xa>
 8002ab4:	4770      	bx	lr
 8002ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aba:	e7f9      	b.n	8002ab0 <memset+0x4>

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4d0d      	ldr	r5, [pc, #52]	@ (8002af4 <__libc_init_array+0x38>)
 8002ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8002af8 <__libc_init_array+0x3c>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	4d0b      	ldr	r5, [pc, #44]	@ (8002afc <__libc_init_array+0x40>)
 8002ace:	4c0c      	ldr	r4, [pc, #48]	@ (8002b00 <__libc_init_array+0x44>)
 8002ad0:	f000 f818 	bl	8002b04 <_init>
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	2600      	movs	r6, #0
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	08002b34 	.word	0x08002b34
 8002af8:	08002b34 	.word	0x08002b34
 8002afc:	08002b34 	.word	0x08002b34
 8002b00:	08002b38 	.word	0x08002b38

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
